server:
  port: 8801

spring:
  main:
    banner-mode: off
  application:
    name: cloud-stream-provider
  cloud:
    stream:
      function:
        definition: onReceive;publishInformationFromFunction
      bindings: # 服务的整合处理
        # 这里是有三组规则在里面的，
        #     第一个，是 onReceive，这个简单，就是直接一个 onReceive config, 然后在后台有个叫 onReceive 的 consumer
        #     一旦收到消息，个 consumer 就直接收取
        #     使用方法：定义一个同名的 consumer 就行
        #
        #     第二个，是 publishInformationFromStreamBridge, publishInformationFromStreamBridge2
        #     这个可以是 streamBridge 解决，
        #     一旦 streamBridge.send("publishInformationFromStreamBridge2", "Message send from sendByFunction");
        #     立即就会有信息发信到所在的 Queue (注意这里和 onReceive-in-0 是有区别的，onReceive-in-0有个 -in- 做格式)
        #     使用方法：定一个 Function
        #          @Bean
        #          public Function<String, String> publishInformationFromFunction() {
        #                 return String::toUpperCase;
        #          }
        #
        #     第三个，是 publishInformationFromFunction-in-0 / publishInformationFromFunction-out-0
        #     这个是一堆的，意思是说，我会自动从 publishInformationFromFunction-in-0 对应的 Queue 获取信息，并且自动发送到
        #     publishInformationFromFunction-out-0 所在的 Queue
        #     使用方法：定一个 Function
        #          @Autowired
        #          private StreamBridge streamBridge;
        #             然后在使用的时候指定目标：
        #          streamBridge.send("publishInformationFromStreamBridge2", "Message send from sendByFunction");
        #
        #
        #
        #
        publishInformationFromStreamBridge:
          destination: studyExchangeFromStreamBridge
        publishInformationFromStreamBridge2:
          destination: studyExchange
        publishInformationFromFunction-in-0:
          destination: studyExchange
        publishInformationFromFunction-out-0:
          destination: studyExchangeFromStreamBridge
        onReceive-in-0:
          destination: studyExchangeFromStreamBridge
          group: consumer
      binders: # 在此处配置要绑定的rabbitmq的服务信息；
        default:
          type: rabbit # 消息组件类型
          environment: # 设置rabbitmq的相关的环境配置
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest

eureka:
  client: # 客户端进行Eureka注册的配置
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
  instance:
    lease-renewal-interval-in-seconds: 2 # 设置心跳的时间间隔（默认是30秒）
    lease-expiration-duration-in-seconds: 5 # 如果现在超过了5秒的间隔（默认是90秒）
    instance-id: Spring-Cloud-Stream-Sender  # 在信息列表时显示主机名称
    prefer-ip-address: true     # 访问的路径变为IP地址